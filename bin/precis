#!/usr/bin/env ruby
# encoding: utf-8
#
# precis
#
# Watches Git repositories, and emails you a weekly (or daily, or
# monthly, whichever you choose) summary of the activity on them.
#
# Author: Rob Miller <rob@bigfish.co.uk>

require 'date'
require 'erb'
require 'letters'

require_relative '../lib/precis'

template = ERB.new File.new(File.dirname(__FILE__) + "/../templates/email.html.erb").read, nil, "%"

period = ARGV.shift
unless ["daily", "weekly", "monthly"].include? period
	period = "weekly"
end

emails = ARGV.shift
emails = emails.split(/,/)
emails = emails.map { |e| e.strip }

# Git expects a "since" date, so we need to map our periods to a date
now = Date.today

case period
when "daily"
	since = now - 1
when "weekly"
	since = now - 7
when "monthly"
	# It's debatable whether we should do "in the current calendar
	# month" (in which case this can only really be run on the last day
	# of the month), or whether it should be "in the last, say, 31
	# days", in which case it will slowly get out of sync with calendar
	# months.
	since = now.strftime("%Y-%m-01")
end

since = since.strftime("%Y-%m-%d")

repos = []

ARGV.each do |path|
	if File.exists?(path) and File.exists?(path + "/.git")
		repos << File.expand_path(path)
	end
end

with_commits = []
zero_commits = []

repos.each do |repo|
	Dir.chdir(repo)

	# Take the last two parts of the path as the short version of the
	# repo.
	nice_name = File.basename(File.dirname(repo)) + "/" + File.basename(repo)

	total_commits = `git log --oneline --since="#{since}" | wc -l`.strip

	if total_commits == "0"
		zero_commits << nice_name
	else
		log_output = `git log --since="#{since}" | git shortlog -ne`.strip.indent("\t")

		with_commits << { :path => repo, :nice_name => nice_name, :num_commits => total_commits, :log => log_output }
	end
end

output = template.result(binding)

emails.each do |email|
	send_email email, :subject => "#{period.capitalize} Git update", :body => output
end
